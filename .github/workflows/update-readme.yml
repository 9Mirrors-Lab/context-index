name: Update README with know-* repos 

on:
  schedule:
    - cron: '*/15 * * * *'  # Every 15 minutes
  workflow_dispatch:        # Manual trigger option

jobs:
  update-readme:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: pip install PyGithub python-dotenv pyjwt[crypto] requests cryptography

      - name: Write private key to file
        run: |
          # Decode base64 encoded private key to avoid GitHub secret masking
          echo "$PRIVATE_KEY" | base64 -d > private-key.der
          echo "‚úÖ Private key written to file"
          
          # Check file format and convert DER to PEM if needed
          FILE_OUTPUT=$(file private-key.der)
          echo "üîç File detection output: $FILE_OUTPUT"
          
          # Check if it's DER format (binary data starting with 0x30 0x82)
          FIRST_BYTES=$(hexdump -C private-key.der | head -1 | cut -d' ' -f2-3)
          echo "üîç First bytes: $FIRST_BYTES"
          
          if [[ "$FIRST_BYTES" == "30 82" ]] || echo "$FILE_OUTPUT" | grep -q -i "der\|data"; then
            echo "üîß Converting DER format to PEM format..."
            openssl rsa -in private-key.der -inform DER -out private-key.pem -outform PEM
            echo "‚úÖ Converted DER to PEM format"
          else
            echo "üîß Assuming PEM format, copying file..."
            cp private-key.der private-key.pem
          fi
        env:
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY_BASE64 }}

      - name: Check dependencies
        run: python .github/scripts/check_dependencies.py

      - name: Test base64 decoding
        run: python .github/scripts/test_base64_decode.py

      - name: Test private key formatting
        run: python .github/scripts/test_private_key.py

      - name: Debug private key issues
        run: python .github/scripts/debug_key.py
        env:
          APP_ID: ${{ secrets.APP_ID }}
          INSTALLATION_ID: ${{ secrets.INSTALLATION_ID }}

      - name: Run generate_readme.py using GitHub App
        run: python .github/scripts/generate_readme.py
        env:
          APP_ID: ${{ secrets.APP_ID }}
          INSTALLATION_ID: ${{ secrets.INSTALLATION_ID }}

      - name: Commit and push changes
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add README.md
          git commit -m "Auto-update README with latest know-* repos" || echo "No changes"
          git push
